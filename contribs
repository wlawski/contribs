#!/bin/bash
#
# contribs - contribution manager
#
# This script analyzes files using Git repository to prepare contribution
# statistics.
#
# Copyright (c) 2013-2014, Wiktor Lawski <wiktor.lawski@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

# Global variables

version=0.99

# Functions

function analyze_file {
	# It is not possible to show both commiter name and email
	# using git blame
	base=`basename $1`
	dir=`dirname $1`
	contribs_file0=$dir.$base.contribs0
	contribs_file1=$dir.$base.contribs1
	contribs_file=$dir.$base.contribs

	git blame -c $1 |
		awk 'match($0, /\([^0-9]+/) {
			print substr($0, RSTART + 1, RLENGTH - 1);
		}' > $contribs_file0

	git blame -c -e $1 |
		awk 'BEGIN {
			OFS="\t";
		}

		{
			match($3, /[0-9]+/);
			print substr($3, RSTART, RLENGTH),
				substr($2, 2, length($2) - 1);
		}' > $contribs_file1


	if [ `paste --help &> /dev/null ; echo $?` -ne 0 ]
	then
		lines=`wc -l $contribs_file1 | awk '{ print $1; }'`

		# TODO: Save file once to increase performance
		for ((i = 1; i <= $lines; i++))
		do
			start=`head -$i $contribs_file1 | tail -1`
			end=`head -$i $contribs_file0 | tail -1`

			printf "$start\t$end\n" >> $contribs_file
		done
	else
		paste -d "\t" $contribs_file1 $contribs_file0 > $contribs_file
	fi

	printf "\n$1\n"

	cat $contribs_file |
		tr --delete "\r" | # Fix for Windows line endings
		awk 'BEGIN {
			FS="\t";
		}

		{
			contrib[$1 "\t" $2 "\t" $3]++;
		}
		
		END {
			for (key in contrib) {
				print key;
			}
		}' |
		sort -k1 |
		awk 'BEGIN {
			contrib[""] = 0; # Dummy associative array
		}

		function get_years(new_year, prev_years) {
			if (new_year == prev_years) {
				return prev_years;
			}

			if (length(prev_years) == 4) {
				if (new_year < prev_years) {
					return new_year "," prev_years;
				} else {
					return prev_years "," new_year;
				}
			}

			i = 0;
			next_year = substr(prev_years, 1, 4);

			do {
				if (next_year == new_year) {
					return prev_years;
				} else if (new_year < next_year) {
					last_years = ((i + 1) < prev_years_size) ? substr(prev_years, (5 * i) + 1, length(prev_years) - (5 * i)) : "";

					return substr(prev_years, 0, 5 * i) new_year "," last_years;
				}

				i++;
				next_year = substr(prev_years, (5 * i) + 1, 4);
			} while (next_year != "");

			return prev_years "," new_year;
		}

		{
			year = $1;
			mail = $2;

			match($0, mail);

			name_idx = RSTART + length(mail) + 1;
			name_size = 0;

			for (i = 3; i <= NF; i++) {
				name_size += length($i);
			}

			name = substr($0, name_idx, name_idx + name_size);
			new_key = mail "\t" name;

			for (key in contrib) {
				if (match(key, new_key) == 0) {
					contrib[year "\t" mail "\t" name]++;

					# It is now possible and necessary to
					# delete dummy key
					delete contrib[""];
				} else {
					match(key, /[0-9\,]+/);
					years = substr(key, RSTART, RLENGTH);

					if (match(years, year) == 0) {
						new_years = get_years(year, years);
						delete contrib[key];
						contrib[new_years "\t" mail "\t" name]++;
					}
				}
			}
		}
		
		END {
			for (key in contrib) {
				print key;
			}
		}' |
		awk '{
			years = $1;

			years_count = split(years, years_table, ",");
			years_short = years_table[1];

			for (i = 2; i <= years_count; i++) {
				length_years = length(years_short);
				last_year = substr(years_short, length_years - 3, 4);

				if (years_table[i] - last_year > 1) {
					years_short = years_short "," years_table[i];
				} else {
					if (substr(years_short, length_years -  4, 1) == "-") {
						years_short = substr(years_short, 1, length_years - 4) years_table[i];
					} else {
						years_short = years_short "-" years_table[i];
					}
				}
			}

			printf("%s\t", years_short);

			for (i = 2; i <= NF; i++) {
				printf("%s\t", $i);
			}

			printf("\n");
		}' |
		sort -k1 |
		awk '{
			printf("%s ", $1);

			for (i = 3; i <= NF; i++) {
				printf("%s ", $i);
			}

			print $2;
		}'

	rm $contribs_file0 $contribs_file1 $contribs_file
}

function print_help {
	cat <<- HELP
	Usage: $0 [OPTION]... [FILE]...
	contribs analyzes files using Git repository to prepare contribution
	statistics.

	  -h | --help - display this help and exit
	  --license - display script license and exit
	  --version - display version details and exit
	HELP

	exit 0
}

function print_license {
	cat LICENSE

	exit 0
}

function print_version {
	cat <<- VERSION
	contribs $version

	Copyright (c) 2013, Wiktor Lawski <wiktor.lawski@gmail.com>
	All rights reserved.
	
	https://github.com/wlawski/contribs
	VERSION

	exit 0
}

# Parse parameters

if [ $# -lt 1 ]
then
	print_help
fi

while [ $# -gt 0 ]
do
	case "$1" in

		"-h" | "--help")
			print_help
			;;

		"--license")
			print_license
			;;

		"--version")
			print_version
			;;

		*)
			analyze_file $1
			shift
			;;

	esac
done
